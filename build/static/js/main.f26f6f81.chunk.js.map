{"version":3,"sources":["components/Todo.js","components/FormInput.js","components/FilterButton.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","ListGroupItem","Row","Col","md","Form","Check","type","label","name","defaultChecked","completed","Button","size","onClick","deleteTask","id","FormInput","useState","setName","console","log","onSubmit","e","preventDefault","addTask","Group","className","controlId","Label","Control","onChange","target","value","autoComplete","placeholder","variant","FilterButton","filterName","Badge","pill","filterQuantity","filters","App","tasks","allTasks","setallTasks","remainingTasks","filter","task","filterList","map","button","taskList","Container","newTask","nanoid","ListGroup","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f26f6f81.chunk.js","sourcesContent":["import React from \"react\";\nimport { ListGroupItem, Row, Col, Form, Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nexport default function Todo(props) {\n  return (\n    <ListGroupItem>\n      <Row>\n        <Col md=\"10\">\n          <Form.Check\n            type=\"checkbox\"\n            label={props.name}\n            defaultChecked={props.completed}\n          ></Form.Check>\n        </Col>\n        <Col md=\"2\">\n          <Button\n            type=\"button\"\n            size=\"sm\"\n            onClick={() => props.deleteTask(props.id)}\n          >\n            Delete\n          </Button>\n        </Col>\n      </Row>\n    </ListGroupItem>\n  );\n}\n","import React from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { useState } from \"react\";\n\nexport default function FormInput(props) {\n  const [name, setName] = useState(\"\");\n\n  function handleChange(e) {\n    setName(e.target.value);\n  }\n  console.log(name);\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!name) return;\n    props.addTask(name);\n    setName(\"\");\n  }\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Group className=\"mb-3\" controlId=\"formTask\">\n        <Form.Label>Enter your Task</Form.Label>\n        <Form.Control\n          onChange={handleChange}\n          size=\"lg\"\n          type=\"text\"\n          autoComplete=\"off\"\n          placeholder=\"Enter your task\"\n          value={name}\n        />\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n","import React from \"react\";\nimport { Button, Badge } from \"react-bootstrap\";\n\nexport default function FilterButton(props) {\n  return (\n    <Button variant=\"outline-primary\">\n      {props.filterName}{\" \"}\n      <Badge variant=\"success\" pill>\n        {props.filterQuantity}\n      </Badge>\n    </Button>\n  );\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Todo from \"./components/Todo\";\nimport FormInput from \"./components/FormInput\";\nimport { Container, Col, Row, ListGroup } from \"react-bootstrap\";\nimport FilterButton from \"./components/FilterButton\";\nimport { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nconst filters = [\n  { filterName: \"ALL\", filterQuantity: \"3\" },\n  { filterName: \"ACTIVE\", filterQuantity: \"2\" },\n  { filterName: \"COMPLETED\", filterQuantity: \"1\" },\n];\n\nfunction App(props) {\n  const [allTasks, setallTasks] = useState(props.tasks);\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false,\n    };\n    setallTasks([...allTasks, newTask]);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = allTasks.filter((task) => task.id !== id);\n    setallTasks(remainingTasks);\n  }\n\n  const filterList = filters.map((button) => (\n    <FilterButton\n      filterName={button.filterName}\n      filterQuantity={button.filterQuantity}\n    />\n  ));\n  const taskList = allTasks.map((task) => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      deleteTask={deleteTask}\n    />\n  ));\n  return (\n    <Container className=\"mt-5\">\n      <Row className=\"justify-content-center Todo-body\">\n        <Col md=\"8\" className=\"text-center my-5\">\n          <div>\n            <h1>DayTask</h1>\n            <h4>Never miss a task aaa</h4>\n          </div>\n          <hr />\n        </Col>\n        <Col md=\"8\">\n          <FormInput addTask={addTask} />\n        </Col>\n        <Col md=\"8\" className=\"my-5 btn-group\">\n          {filterList}\n        </Col>\n        <Col md=\"8\">\n          <ListGroup className=\"mb-5\">{taskList}</ListGroup>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst DATA = [\n  { id: \"todo-1\", name: \"Clean\", completed: true },\n  { id: \"todo-2\", name: \"Cook\", completed: false },\n  { id: \"todo-3\", name: \"Gym\", completed: false },\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks={DATA} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}